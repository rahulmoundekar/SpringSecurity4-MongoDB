<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
	http://www.springframework.org/schema/security
	http://www.springframework.org/schema/security/spring-security-4.0.xsd">

	<!-- Enable the method security to use the @PreAuthorize, @PreFilter, @PostAuthorize 
		and @PostFilter annotations in methods and secure it. -->
	<global-method-security pre-post-annotations="enabled" />

	<!-- secure the applicationÂ´s urls with the specific Role -->
	<http auto-config="true" use-expressions="true">
		<!-- <intercept-url pattern="/*/**" access="permitAll" /> -->
		<intercept-url pattern="/login" access="permitAll" />
		<intercept-url pattern="/logout" access="permitAll" />
		<intercept-url pattern="/accessdenied" access="permitAll" />

		<!-- <intercept-url pattern="/listCampaigns"
			access="hasAnyRole('ROLE_ADMIN','ROLE_CAMPAIGN')" />
 -->			
		<intercept-url pattern="/listUsers" access="hasRole('ROLE_ADMIN')" />
		<intercept-url pattern="/changeStatus/**" access="hasRole('ROLE_ADMIN')" />
		
						
		<intercept-url pattern="/menu"
			access="hasAnyRole('ROLE_ADMIN','ROLE_USER')" />
			
		<intercept-url pattern="/employee/**"
			access="hasAnyRole('ROLE_ADMIN','ROLE_USER')" />
			
		<access-denied-handler error-page="/accessdenied" />
		<form-login login-page="/login" default-target-url="/menu"
			login-processing-url="/j_spring_security_check"
			authentication-failure-url="/accessdenied" username-parameter="j_username"
			password-parameter="j_password" />

		<!-- <logout logout-success-url="/logout" invalidate-session="true"/> -->
		<logout logout-url="/j_spring_security_logout"
			logout-success-url="/logout" invalidate-session="true" />
		<csrf disabled="true" />
	</http>

	<!-- Define the application authentication manager to use a custom Class 
		(mongoUserDetailsService) to validate the user access, and the password enconding -->
	<authentication-manager alias="authenticationManager">
		<authentication-provider user-service-ref="mongoUserDetailsService">
			<password-encoder hash="plaintext" />
		</authentication-provider>
	</authentication-manager>


</beans:beans>